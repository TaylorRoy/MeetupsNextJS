{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\TaylorCoding\\\\React Course\\\\MeetupsNextJS\\\\pages\\\\[meetupID].js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail // id={props.id}\n  , {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://TaylorBRoy:iaHU4PxeDH1MrD3R@cluster0.iuir7.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    //false = all paths have been defined.  404 will be generated\n    //blocking= list of paths is not exhausted.  might be more pages.  returns finished page\n    //true= list of paths is not exhausted.  might be more pages. immediately return empty page(need to handle this) and then pull down content after don rendering\n    fallback: \"blocking\",\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupID: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupID = context.params.meetupID;\n  const API_KEY = process.env.API_KEY;\n  const client = await MongoClient.connect(\"mongodb+srv://TaylorBRoy:API_KEY@cluster0.iuir7.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupID)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/MeetupsNextJS/pages/[meetupID].js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupID","toString","getStaticProps","context","API_KEY","process","env","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD,CACE;AADF;AAEE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAH1B;AAIE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAJ5B;AAKE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AALhC;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,0GADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACL;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,UAJL;AAKLC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AALF,GAAP;AASD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMI,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAA5B;AACA,QAAMnB,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,iGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMkB,cAAc,GAAG,MAAMnB,iBAAiB,CAACoB,OAAlB,CAA0B;AACrDhB,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AADwC,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV8B,QAAAA,EAAE,EAAEF,cAAc,CAACf,GAAf,CAAmBS,QAAnB,EADM;AAEVpB,QAAAA,KAAK,EAAE0B,cAAc,CAAC1B,KAFZ;AAGVC,QAAAA,OAAO,EAAEyB,cAAc,CAACzB,OAHd;AAIVF,QAAAA,KAAK,EAAE2B,cAAc,CAAC3B;AAJZ;AADP;AADF,GAAP;AAUD;AAED,eAAeH,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\nimport MeetupDetail from \"../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      // id={props.id}\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://TaylorBRoy:iaHU4PxeDH1MrD3R@cluster0.iuir7.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    //false = all paths have been defined.  404 will be generated\r\n    //blocking= list of paths is not exhausted.  might be more pages.  returns finished page\r\n    //true= list of paths is not exhausted.  might be more pages. immediately return empty page(need to handle this) and then pull down content after don rendering\r\n    fallback: \"blocking\",\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupID: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupID = context.params.meetupID;\r\n  const API_KEY = process.env.API_KEY;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://TaylorBRoy:API_KEY@cluster0.iuir7.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupID),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}